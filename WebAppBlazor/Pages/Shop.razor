@page "/shop/"
@page "/shop/{PageId:int}"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@using PokeShop.Shared.Dto;
@using WebAppBlazor.Entities
@using WebAppBlazor.Services

@code {
    [Parameter] public int? PageId { get; set; }

    List<PokemonViewModel> _pokemonViewModel = new();
    List<PokemonViewModel> _filteredPokemonViewModel = new();

    bool IsFailed { get; set; } = false;

    string _currentSearchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        PageId ??= 1;

        var httpHelper = new HttpHelper(HttpClient);

        try
        {
            await GetPokemon(httpHelper);
        }
        catch (HttpRequestException e)
        {
            IsFailed = true;
            throw;
        }
    }

    async Task GetPokemon(HttpHelper httpHelper)
    {
        List<PokemonDto> pokemon;
        List<PokemonStatsDto> pokemonStats;

        pokemon = await httpHelper.GetAsync<IEnumerable<PokemonDto>>($"/api/Pokemon") as List<PokemonDto>;
        pokemonStats = await httpHelper.GetAsync<IEnumerable<PokemonStatsDto>>($"/api/PokemonStats") as List<PokemonStatsDto>;

        _pokemonViewModel = pokemon.Select(x => new PokemonViewModel()
        {
            Pokemon = x,
            PokemonStats = pokemonStats.FirstOrDefault(y => y.Id == x.Id)
        }).OrderBy(x => x.Pokemon.Id).ToList();

        var itemsToSkip = (PageId - 1) * 10;

        _filteredPokemonViewModel = _pokemonViewModel;

        _filteredPokemonViewModel = _filteredPokemonViewModel
            .Skip((int)itemsToSkip)
            .Take(10)
            .ToList();
    }

    void OnSearch(string searchQuery)
    {
        if (!string.IsNullOrEmpty(searchQuery))
            _filteredPokemonViewModel = _filteredPokemonViewModel
                .Where(p => p.Pokemon.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        else
            _filteredPokemonViewModel = _pokemonViewModel;
    }

    void OnSort(Sort sort)
    {
        _pokemonViewModel = sort switch
        {
            Sort.Name => _pokemonViewModel.OrderBy(x => x.Pokemon.Name).ToList(),
            Sort.Weight => _pokemonViewModel.OrderBy(x => x.PokemonStats.Weight).ToList(),
            _ => _pokemonViewModel.OrderBy(x => x.Pokemon.Id).ToList()
        };

        var itemsToSkip = (PageId - 1) * 10;

        _filteredPokemonViewModel = _pokemonViewModel
            .Skip((int)itemsToSkip)
            .Take(10)
            .ToList();
    }

}

<PageTitle>Shop</PageTitle>

<HeaderImg Src="public/look.svg"/>

@if (IsFailed)
{
    <p>Sorry, cannot connect to server.</p>
}

<section class="w-100 border-top border-bottom border-dark">
    <QueryMenu SearchQueryEvent="@OnSearch" SortQueryEvent="@OnSort" ProductCount="@_pokemonViewModel.Count"/>
</section>

<div class="d-flex flex-wrap gap-1 m-0 w-100">
    @foreach (var item in _filteredPokemonViewModel)
    {
        <PokemonCard PokemonId="@item.Pokemon.Id" PokemonName="@item.Pokemon.Name" PokemonWeight="@item.PokemonStats.Weight" SpriteUrl="@item.Pokemon.Sprite" UrlRedirect="/shop/itempage"/>
    }
</div>

<br>

<Pagination PageSize="10" CurrentPage="(int)PageId" PokemonCount="@_pokemonViewModel.Count()"/>